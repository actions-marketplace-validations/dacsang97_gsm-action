name: "GSM - GitHub Secrets Manager"
description: "Automatically decrypt config files and push secrets to GitHub repositories"
author: "dacsang97"
branding:
  icon: "lock"
  color: "purple"

inputs:
  config-path:
    description: "Path to encrypted config files"
    required: false
    default: "config/encrypted"
  github-token:
    description: "GitHub token with repo and admin:repo_hook permissions"
    required: true
  encryption-key:
    description: "Master encryption key for decrypting config files"
    required: true
  gsm-version:
    description: "GSM version to use"
    required: false
    default: "latest"
  dry-run:
    description: "Run in dry-run mode (decrypt only, no push)"
    required: false
    default: "false"
  specific-file:
    description: "Process only a specific config file (relative to config-path)"
    required: false
    default: ""

outputs:
  processed-files:
    description: "List of processed config files"
    value: ${{ steps.process.outputs.processed-files }}
  updated-repos:
    description: "List of repositories that were updated"
    value: ${{ steps.process.outputs.updated-repos }}

runs:
  using: "composite"
  steps:
    - name: Setup GSM
      id: setup
      shell: bash
      run: |
        echo "::group::Setting up GSM"

        # Determine version
        VERSION="${{ inputs.gsm-version }}"
        if [ "$VERSION" = "latest" ]; then
          VERSION=$(curl -s https://api.github.com/repos/dacsang97/gsm/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        fi
        echo "Using GSM version: $VERSION"

        # Determine platform
        PLATFORM=""
        case "${{ runner.os }}" in
          Linux)
            PLATFORM="linux-x86_64"
            ;;
          macOS)
            if [ "${{ runner.arch }}" = "ARM64" ]; then
              PLATFORM="macos-aarch64"
            else
              PLATFORM="macos-x86_64"
            fi
            ;;
          Windows)
            PLATFORM="windows-x86_64"
            ;;
        esac

        # Download GSM
        BINARY_NAME="gsm"
        if [ "${{ runner.os }}" = "Windows" ]; then
          BINARY_NAME="gsm.exe"
        fi

        echo "Downloading GSM for $PLATFORM..."
        curl -L -o "$BINARY_NAME" "https://github.com/dacsang97/gsm/releases/download/${VERSION}/gsm-${PLATFORM}"
        chmod +x "$BINARY_NAME"

        # Add to PATH
        echo "$PWD" >> $GITHUB_PATH

        # Verify installation
        ./"$BINARY_NAME"

        echo "::endgroup::"

    - name: Process Config Files
      id: process
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        ENCRYPTION_KEY: ${{ inputs.encryption-key }}
      run: |
        echo "::group::Processing config files"

        # Create temporary directory for decrypted files
        TEMP_DIR=$(mktemp -d)
        trap "rm -rf $TEMP_DIR" EXIT

        # Copy encrypted files to temp structure
        mkdir -p "$TEMP_DIR/encrypted"
        cp -r "${{ inputs.config-path }}"/* "$TEMP_DIR/encrypted/" 2>/dev/null || true

        # Decrypt all files using GSM's built-in command
        echo "Decrypting all config files..."
        gsm decrypt-all --input "$TEMP_DIR"

        # Get list of decrypted files
        DECRYPTED_FILES=$(find "$TEMP_DIR/raw" -name "*.yaml" -o -name "*.yml" 2>/dev/null | sort)
        PROCESSED_FILES=""
        UPDATED_REPOS=""

        # Process each decrypted file
        for decrypted_file in $DECRYPTED_FILES; do
          # Get relative path for output
          REL_PATH=${decrypted_file#$TEMP_DIR/raw/}
          ENCRYPTED_PATH="${{ inputs.config-path }}/$REL_PATH"
          
          echo "Processing: $ENCRYPTED_PATH"
          
          # Add to processed files list
          if [ -n "$PROCESSED_FILES" ]; then
            PROCESSED_FILES="${PROCESSED_FILES},$ENCRYPTED_PATH"
          else
            PROCESSED_FILES="$ENCRYPTED_PATH"
          fi
          
          # Extract org and repos from decrypted file
          if [ -f "$decrypted_file" ]; then
            ORG=$(grep "^org:" "$decrypted_file" | cut -d':' -f2 | tr -d ' ')
            REPOS=$(grep -A50 "^repositories:" "$decrypted_file" | grep "^  - " | sed 's/^  - //')
            
            if [ "${{ inputs.dry-run }}" = "true" ]; then
              echo "  Dry-run mode: Validation successful"
              echo "  Would update repos:"
              for repo in $REPOS; do
                echo "    - ${ORG}/${repo}"
              done
            else
              # Process specific file if specified, otherwise process all
              if [ -n "${{ inputs.specific-file }}" ]; then
                # Check if this is the specific file requested
                if [ "$REL_PATH" = "${{ inputs.specific-file }}" ]; then
                  echo "  Pushing secrets from specific file..."
                  gsm push --file "$decrypted_file"
                  
                  # Add repos to updated list
                  for repo in $REPOS; do
                    REPO_FULL="${ORG}/${repo}"
                    if [ -n "$UPDATED_REPOS" ]; then
                      if ! echo "$UPDATED_REPOS" | grep -q "$REPO_FULL"; then
                        UPDATED_REPOS="${UPDATED_REPOS},$REPO_FULL"
                      fi
                    else
                      UPDATED_REPOS="$REPO_FULL"
                    fi
                  done
                fi
              else
                # Process all files
                echo "  Pushing secrets..."
                gsm push --file "$decrypted_file"
                
                # Add repos to updated list
                for repo in $REPOS; do
                  REPO_FULL="${ORG}/${repo}"
                  if [ -n "$UPDATED_REPOS" ]; then
                    if ! echo "$UPDATED_REPOS" | grep -q "$REPO_FULL"; then
                      UPDATED_REPOS="${UPDATED_REPOS},$REPO_FULL"
                    fi
                  else
                    UPDATED_REPOS="$REPO_FULL"
                  fi
                done
              fi
            fi
          fi
        done

        # Set outputs
        echo "processed-files=$PROCESSED_FILES" >> $GITHUB_OUTPUT
        echo "updated-repos=$UPDATED_REPOS" >> $GITHUB_OUTPUT

        # Summary
        echo ""
        echo "Summary:"
        echo "  Processed files: $PROCESSED_FILES"
        if [ "${{ inputs.dry-run }}" != "true" ]; then
          echo "  Updated repositories: $UPDATED_REPOS"
        fi

        echo "::endgroup::"

    - name: Generate Summary
      shell: bash
      run: |
        echo "## GSM Action Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ inputs.dry-run }}" = "true" ]; then
          echo "**Mode:** Dry-run (validation only)" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Mode:** Live (secrets pushed)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "### Processed Files" >> $GITHUB_STEP_SUMMARY
        IFS=',' read -ra FILES <<< "${{ steps.process.outputs.processed-files }}"
        for file in "${FILES[@]}"; do
          echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
        done
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ inputs.dry-run }}" != "true" ] && [ -n "${{ steps.process.outputs.updated-repos }}" ]; then
          echo "### Updated Repositories" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra REPOS <<< "${{ steps.process.outputs.updated-repos }}"
          for repo in "${REPOS[@]}"; do
            echo "- \`$repo\`" >> $GITHUB_STEP_SUMMARY
          done
        fi
