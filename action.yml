name: "GSM - GitHub Secrets Manager"
description: "Automatically decrypt config files and push secrets to GitHub repositories"
author: "dacsang97"
branding:
  icon: "lock"
  color: "purple"

inputs:
  config-path:
    description: "Path to encrypted config files"
    required: false
    default: "config/encrypted"
  github-token:
    description: "GitHub token with repo and admin:repo_hook permissions"
    required: true
  encryption-key:
    description: "Master encryption key for decrypting config files"
    required: true
  gsm-version:
    description: "GSM version to use"
    required: false
    default: "latest"
  dry-run:
    description: "Run in dry-run mode (decrypt only, no push)"
    required: false
    default: "false"

outputs:
  processed-files:
    description: "List of processed config files"
    value: ${{ steps.process.outputs.processed-files }}

runs:
  using: "composite"
  steps:
    - name: Setup GSM
      id: setup
      shell: bash
      run: |
        echo "::group::Setting up GSM"

        # Determine version
        VERSION="${{ inputs.gsm-version }}"
        if [ "$VERSION" = "latest" ]; then
          echo "Fetching latest version from GitHub..."
          VERSION=$(curl -s https://api.github.com/repos/dacsang97/gsm/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "")
          if [ -z "$VERSION" ]; then
            echo "Using fallback version: v0.0.1"
            VERSION="v0.0.1"
          fi
        fi
        echo "Using GSM version: $VERSION"

        # Determine platform
        PLATFORM="linux-x86_64"
        case "${{ runner.os }}" in
          macOS)
            if [ "${{ runner.arch }}" = "ARM64" ]; then
              PLATFORM="macos-aarch64"
            else
              PLATFORM="macos-x86_64"
            fi
            ;;
          Windows)
            PLATFORM="windows-x86_64"
            ;;
        esac

        # Download GSM
        BINARY_NAME="gsm"
        if [ "${{ runner.os }}" = "Windows" ]; then
          BINARY_NAME="gsm.exe"
        fi

        echo "Downloading GSM for $PLATFORM..."
        DOWNLOAD_URL="https://github.com/dacsang97/gsm/releases/download/${VERSION}/gsm-${PLATFORM}"
        echo "Download URL: $DOWNLOAD_URL"

        if ! curl -L -f -o "$BINARY_NAME" "$DOWNLOAD_URL"; then
          echo "❌ Failed to download GSM binary"
          exit 1
        fi

        chmod +x "$BINARY_NAME"
        echo "$PWD" >> $GITHUB_PATH
        echo "✓ GSM installed successfully"

        echo "::endgroup::"

    - name: Process Config Files
      id: process
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        ENCRYPTION_KEY: ${{ inputs.encryption-key }}
      run: |
        echo "::group::Processing config files"

        # Create temporary directory
        TEMP_DIR=$(mktemp -d)
        trap "rm -rf $TEMP_DIR" EXIT

        # Copy encrypted files to temp structure
        mkdir -p "$TEMP_DIR/encrypted"
        cp -r "${{ inputs.config-path }}"/* "$TEMP_DIR/encrypted/" 2>/dev/null || true

        # Decrypt all files
        echo "Decrypting all config files..."
        gsm decrypt-all --input "$TEMP_DIR"

        # Find all decrypted files
        DECRYPTED_FILES=$(find "$TEMP_DIR/raw" -name "*.yaml" -o -name "*.yml" 2>/dev/null | sort)
        PROCESSED_FILES=""

        if [ -z "$DECRYPTED_FILES" ]; then
          echo "No files to process"
          exit 0
        fi

        # Process each file
        for decrypted_file in $DECRYPTED_FILES; do
          REL_PATH=${decrypted_file#$TEMP_DIR/raw/}
          echo "Processing: $REL_PATH"
          
          # Track processed files
          if [ -n "$PROCESSED_FILES" ]; then
            PROCESSED_FILES="${PROCESSED_FILES},$REL_PATH"
          else
            PROCESSED_FILES="$REL_PATH"
          fi
          
          if [ "${{ inputs.dry-run }}" = "true" ]; then
            echo "  Dry-run mode: Skipping push"
            # Validate file structure
            gsm validate --file "$decrypted_file" || echo "  Warning: Validation failed"
          else
            echo "  Pushing secrets..."
            if gsm push --file "$decrypted_file"; then
              echo "  ✓ Success"
            else
              echo "  ❌ Failed to push secrets"
              echo "  Check that GitHub token has correct permissions and repositories exist"
            fi
          fi
        done

        # Set outputs
        echo "processed-files=$PROCESSED_FILES" >> $GITHUB_OUTPUT

        echo ""
        echo "Summary: Processed $(echo "$PROCESSED_FILES" | tr ',' '\n' | wc -l) file(s)"

        echo "::endgroup::"

    - name: Generate Summary
      shell: bash
      run: |
        echo "## GSM Action Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ inputs.dry-run }}" = "true" ]; then
          echo "**Mode:** Dry-run (validation only)" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Mode:** Live (secrets pushed)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -n "${{ steps.process.outputs.processed-files }}" ]; then
          echo "### Processed Files" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra FILES <<< "${{ steps.process.outputs.processed-files }}"
          for file in "${FILES[@]}"; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "No files were processed." >> $GITHUB_STEP_SUMMARY
        fi
